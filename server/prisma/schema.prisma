generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  role               Role
  address            String?
  phone              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  cart               Cart?
  orders             Order[]
  payments           Payment[]
  resetPasswordToken ResetPasswordToken[]
  reviews            Review[]
  vendor             Vendor?
  vendorRequest      VendorRequest?
  wishList           WishList[]
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model VendorRequest {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  status    RequestStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
}

model Vendor {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  storeName        String
  storeDescription String?
  logo             String?
  isActive         Boolean   @default(false)
  Order            Order[]
  products         Product[]
  user             User      @relation(fields: [userId], references: [id])
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Float
  sku         String?
  stock       Int           @default(0)
  images      String[]
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  categoryId  Int?
  status      ProductStatus @default(INSTOCK)
  vendorId    Int?
  slug        String        @unique
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category?     @relation(fields: [categoryId], references: [id])
  vendor      Vendor?       @relation(fields: [vendorId], references: [id])
  reviews     Review[]
  wishList    WishList[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  createdAt     DateTime   @default(now())
  parentId      Int?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]

  @@unique([name, parentId])
}

model Order {
  id              Int          @id @default(autoincrement())
  userId          Int
  totalAmount     Float
  shippingFee   Float?
  discountAmount  Float?
  couponCode      String?
  shippingAddressId  Int  @unique
  shippingAddress  ShippingInfo?  @relation(fields: [shippingAddressId], references: [id])
  status          OrderStatus  @default(PENDING)
  createdAt       DateTime     @default(now())
  deliveredAt     DateTime?
  shippedAt       DateTime?
  cancelledAt     DateTime?
  vendorId        Int
  user            User         @relation(fields: [userId], references: [id])
  vendor          Vendor       @relation(fields: [vendorId], references: [id])
  orderItems      OrderItem[]
  payment         Payment[]
}

model ShippingInfo {
  id       Int    @id @default(autoincrement())
  name     String
  lastName String
  email    String
  address  String
  city     String
  state    String
  zipcode  String
  orderId  Int?    @unique
  order    Order?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, cartId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  orderId       Int
  amount        Float
  transactionId String?
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
}

enum ProductStatus {
  INSTOCK
  OUT_OF_STOCK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  USER
  VENDOR
  ADMIN
}

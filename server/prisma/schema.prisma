// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  role          Role
  address       String?
  phone         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  vendor        Vendor?
  vendorRequest VendorRequest?
  cart          Cart? 
  orders        Order[]
  payments      Payment[]
  reviews       Review[]
  wishList      WishList[]
  resetPasswordToken ResetPasswordToken[]
  
}
model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  used    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VendorRequest {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  user      User          @relation(fields: [userId], references: [id])
  status    RequestStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Vendor {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id])
  storeName        String
  storeDescription String?
  logo             String?
  isActive         Boolean   @default(false)
  products         Product[]
  Order            Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  sku         String
  stock       Int         @default(0)
  images      String[]
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  vendorId    Int?
  Vendor      Vendor?     @relation(fields: [vendorId], references: [id])
  categoryId  Int?
  Category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  wishList    WishList[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  vendorId    Int
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  orderItems  OrderItem[]
  payment     Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id],onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  quantity  Int     @default(1)

  @@unique([productId,cartId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  orderId       Int
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  transactionId String?
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
}
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  USER
  VENDOR
  ADMIN
}
